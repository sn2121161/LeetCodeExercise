[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "leetcode_diary",
    "section": "",
    "text": "Self Blog\nThis is a Quarto book to record the mind, methodology, solving code about exercises in LeetCode. put it into Github.\nKeep going, always on the way\n\nprint(\"keep going and always on the way\")\n\nkeep going and always on the way\n\n\n感谢卡尔哥: Source: bilibili"
  },
  {
    "objectID": "list1.html#两数之和",
    "href": "list1.html#两数之和",
    "title": "1  数组1(list)",
    "section": "1.1 两数之和",
    "text": "1.1 两数之和\n\n单指针的解法\n\n在这里for循环里是一次，然后in操作又有一次遍历列表的过程，还要确定两者的index不相等，表示不是同一个数\n\n# input\nnums = [2,3,4,5]\ntarget = 8\n\n# output: [3, 5]\n\ndef TwoSums(list: nums, int: target):\n  for i in range(len(nums)):\n    j = target -nums[i]\n    if j in nums and i != nums.index(j):\n      return [nums[i], j]\n  return -1\n\n\nprint(TwoSums(nums, target))\n\n[3, 5]\n\n\n\n字典的解法\n\n\n构造一个di，结构是{value1: index1, value2: index2}\n用enumerate(nums)的k和v找target - v的值\n如果di.get()找到了值则返回\n如果找不到，则在字典中加入新的键值对\n\n\nnums = [2,3,4,5]\ntarget = 6\n\n\ndef TwoSums2(list: nums, int: target):\n  di = {}\n  for k, v in enumerate(nums):\n    if di.get(target - v) is not None:\n      return [target - v, v]\n    di[v] = k\n  return -1\n\n\nprint(TwoSums2(nums, target))\n\n[2, 4]\n\n\n\n双指针的解法 双指针的初始化结构是\n\n\n# 伪代码\nleft = 0 \nright = len(nums)-1 \nwhile left right: \n  .... \n  if (condition):\n    return\n  elif (condition):\n    left += 1 \n  else:\n    right -= 1\n\nnums = [2,3,4,5]\ntarget = 5\n\n\ndef TwoSums3(list:nums, int:target):\n  # 那么先要给数组排序\n  nums.sort()\n  left = 0\n  right = len(nums)-1\n  while left <= right:\n    if nums[left] + nums[right] == target:\n      return [nums[left], nums[right]]\n    elif nums[left] + nums[right] < target:\n      left += 1\n    else:\n      right -= 1\n  return -1\n\n\nprint(TwoSums3(nums, target))\n\n[2, 3]"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n2"
  },
  {
    "objectID": "list1.html#二分查找",
    "href": "list1.html#二分查找",
    "title": "1  数组1(list)",
    "section": "1.2 二分查找",
    "text": "1.2 二分查找\n\n双指针\n\n\n\n\n指针示意图\n\n\n\n# input\nnums = [1,3,5,7,9]\ntarget = 9\n\n# output：返回元素所在的index\n\ndef BinarySearch(list: nums, int: target):\n  left = 0\n  right = len(nums) - 1\n  while left <= right:\n    mid = (left+right)//2  # 取整数\n    if target == nums[mid]:\n      return mid\n    elif target > nums[mid]:  # 在右边\n      left += 1\n    else:\n      right -= 1\n  return -1   # 找不到返回-1\n\n\nprint(BinarySearch(nums, target))\n\n4"
  },
  {
    "objectID": "list1.html#找列表中最小的正整数",
    "href": "list1.html#找列表中最小的正整数",
    "title": "1  数组1(list)",
    "section": "1.3 找列表中最小的正整数",
    "text": "1.3 找列表中最小的正整数\n\n创建新列表记录所有的正整数\n\n空间复杂度高\n\n排序，数出负数和0出现到第几个index 排序以后记录下0出现到了第几个位置，count，然后返回count的那个下标是最小值\n\n\n# input\nnums = [2,3,-1,-11,-323,1,5,32]\n\n# output: 1\n\ndef MinPositive(list:nums):\n  count = 0\n  nums.sort()\n  for i in range(len(nums)):\n    if nums[i] <= 0:\n      count += 1\n  return nums[count]\n  \nprint(MinPositive(nums))\n\n1\n\n\n小问题：不排序能实现max和min吗？ 可以\n\n# input\nnums = [2,3,-1,-11,-323,1,5,32,33]\n\n# output: 32\n\n\ndef Max(list:nums):\n  temp = 0\n  for i in range(1, len(nums)):\n    if nums[i] >= nums[temp]:\n      temp = i\n  return nums[temp]\n\nprint(Max(nums))\n\n33"
  },
  {
    "objectID": "list1.html#三数之和",
    "href": "list1.html#三数之和",
    "title": "1  数组1(list)",
    "section": "1.4 三数之和",
    "text": "1.4 三数之和\n\n双指针\n\n\n要求就是搞一个列表容纳所有的解\n你需要一个遍历去让每个元素，这个元素是第一个指针\n然后设置left和right的开始，left从第i+1个开始，right从最右边的开始\n判断相等和大于小于的时候指针怎么走\n怎么消除重复的影响（因为有些值是重复的） –需要对每个指针各自前后的值进行比较 –指针a的判断，nums[a] == nums[a-1]: 跳过 –指针b的判断，nums[left-1] == nums[left]: left += 1，否则还是继续考虑当前位置 –指针c的判断，nums[right+1] == nums[right]: right -= 1\n\n\n\n\n图1\n\n\n\n\n\n图2\n\n\n\n# input\nnums = [-1,0,1,2,-1,-4]\ntarget = 0\n\n# output\n\ndef ThreeSums(list: nums, int: target):\n  res = []  # 解的容器\n  nums.sort()  # 先对数组进行排序\n  \n  for i in range(len(nums)-1):   # 指针a\n    left = i+1  # 指针b\n    right = len(nums)-1  # 指针c\n    if nums[i] == nums[i-1]:  #这是指针a自己的判断，判断前一个后一个是否相等\n      continue  # 跳过相同值得指针得计算\n    while left < right:\n      sums = nums[i] + nums[left] + nums[right]\n      if sums == target and nums[right] != nums[left]:\n        res.append( [nums[i], nums[left], nums[right]] )  # 符合的加入解集\n        left += 1 # 接着往后计算\n        # 其实去掉也行嘛\n        \n        # if nums[left] == nums[left - 1]: # 指针b得前后值相同\n          # left += 1\n        # right -= 1  # else\n        # if nums[right] == nums[right + 1]:\n          # right -= 1\n      elif sums < target:\n        left += 1\n      else:\n        right -= 1\n        \n  return res\n  \nprint(ThreeSums(nums, target))\n\n[[-1, -1, 2], [-1, 0, 1]]\n\n\n\n1.4.1 解析：假如本例中的5,5,10\npointer a = 5 pointer b = 5 pointer c = 10 他符合等于target的条件，加入res left += 1 pointer a = 5 pointer b = 6 pointer c = 9 (left != left-1，所以走right-=1的路，再判断此时的right+1和当前right是否相等，发现不等，则无需再让right-=1) 判断5,6,9依然符合条件 left += 1， left=9，right <9,循环结束\n\n\n1.4.2 另外一个问题：消除二维数组的重复问题\n\n# input\nnums = [[1,2,3], [4,5,6], [4,5,6], [1,2,3]]\n\n# output: [[1,2,3], [4,5,6]]\n\ndef eliminate(list: nums) -> list:\n  di = {}\n  for i, v in enumerate(nums):\n    di[str(v)] = i\n  return di.keys()\n\ndef eliminate2(list: nums) -> list:\n  res = []\n  for i in range(len(nums)):\n    if nums[i] not in res:\n      res.append(nums[i])\n  return res\n  \nprint(eliminate2(nums))\n\n[[1, 2, 3], [4, 5, 6]]"
  },
  {
    "objectID": "list1.html#数组实现哈希表",
    "href": "list1.html#数组实现哈希表",
    "title": "1  数组1(list)",
    "section": "1.5 数组实现哈希表",
    "text": "1.5 数组实现哈希表\n一个哈希表的功能有：\nkey: value是哈希表的基本单位 * 增加元素 * 删除元素 * 查找元素，找不到返回-1\n本题巧妙处就是构造了一个全是-1的数组，注意长度不要溢出即可\n\nclass Hashmap():\n  def __init__(self):\n    self.hashmap = [-1 for _ in range(10**3)]  # 构造一个全是-1的元素表\n  \n  def add(self, key, value):\n    self.hashmap[key] = value\n  \n  def get(self, key):\n    return self.hashmap[key]\n    \n  def remove(self, key):\n    self.hashmap[key] = -1\n\nh = Hashmap()\nh.add(1, 2)\nh.add(10, 4)\nprint(h.get(10))\nprint(h.get(1))\nprint(h.get(5))\nh.remove(1)\nprint(h.get(1))\n\n4\n2\n-1\n-1"
  },
  {
    "objectID": "list1.html#数组的合并",
    "href": "list1.html#数组的合并",
    "title": "1  数组1(list)",
    "section": "1.6 数组的合并",
    "text": "1.6 数组的合并\n\n# input \nnums = [[1,2,3], [4,5,8], [7,12,13]]\nnums2 = [[1,4],[0,0]]\n\n# output: [[1,2,3], [4,13]], [[1,4], [5,6], [7,9]]\n\ndef CombineSame(nums):\n  nums.sort()\n  a = 0\n  while a <= len(nums)-1:\n    for i in range(len(nums)-1):\n      if nums[i][-1] >= nums[i+1][0]:\n        nums[i] = nums[i+1] = [nums[i][0], nums[i+1][-1]]  # 遍历了每个元素\n        \n      a += 1\n      \n  # 数组去重，这个复杂度可能很高，\n  # 因为not in的操作可能需要O(n)时间，但是题目还是解出来了\n  res = []\n  \n  for i in range(len(nums)):\n    if nums[i] not in res:\n      res.append(nums[i])\n  \n  return res\n\n\n# print(CombineSame(nums))\nprint(CombineSame(nums2))\n\n[[0, 0], [1, 4]]"
  },
  {
    "objectID": "list1.html#删除数组的元素27",
    "href": "list1.html#删除数组的元素27",
    "title": "1  数组1(list)",
    "section": "1.7 删除数组的元素（27）",
    "text": "1.7 删除数组的元素（27）\n\n两层for循环\n\n删除元素的操作时间复杂度是O(n)，因为删去了一个元素，还要让其他的元素进行补位，只是在计数器层面上他的长度减少了1，在物理空间储存上任然是原长度\n\n双指针\n\n\n定义一个慢指针和一个快指针\n快指针负责寻找哪些元素是要的，当前案例3是不要的，然后再赋值给慢指针，所以慢指针是被赋值的元素\n慢指针也需要往后加一\n\n示意图 \n\n# input\nnums = [1,2,3,4,5]\ntarget = 3\n\n# output [1,2,4,5,5]\n\n# 两层for循环\ndef delete0(nums, target):\n  for i in range(len(nums)):\n    if nums[i] == target:\n      for j in range(0, i):\n        nums[i+j] = nums[j+i+1]\n  return nums, len(nums)\n\n# 双指针\ndef delete1(nums, target):\n  slow = 0  # 慢指针\n  for i in range(len(nums)):  # 快指针\n    if nums[i] != target:\n      nums[slow] = nums[i]  # 对非目标元素进行一一赋值\n      slow += 1   # 慢指针也需要移动\n  return slow\nprint(delete0(nums, target))\nprint(delete1(nums, target))\n\n([1, 2, 4, 5, 5], 5)\n\n\n\n5"
  },
  {
    "objectID": "list1.html#有序数组的平方977",
    "href": "list1.html#有序数组的平方977",
    "title": "1  数组1(list)",
    "section": "1.8 有序数组的平方（977）",
    "text": "1.8 有序数组的平方（977）\n\nO(nlogn):负数的平方需要排个序\n双指针 O(n)：\n\n首先，一个可以使用的思路：先构造一个有初始值的列表，然后从左往右或者从右往左进行赋值\n为什么function3是不对的：\n因为左边和右边代表着两个之间必有一个是全局最大， 最大的在新数组中放在最优的位置， 而你通过两侧的指针不能确定全局最小在哪里，要从中心往外延申 append也不对，因为append是从最小的开始往数组里加\n\n# input\nnums = [-8, 2, 3, 5, 7]\n\n# output [1,4,9,25,49]\n\ndef function1(nums):\n  a = list(map(lambda x:x**2, nums))\n  a.sort()\n  return a\n\n\ndef function2(nums):\n  res = [0 for _ in range(len(nums))]   # 生成一个有值的数组，然后从数组的最右侧开始像最左侧赋值\n\n  left = 0\n  right = k = len(nums)-1\n  while left <= right:\n    if pow(nums[left], 2) > pow(nums[right], 2):\n      res[k] = pow(nums[left], 2)\n      k -= 1\n      left += 1\n      \n    else:\n      res[k] = pow(nums[right], 2)\n      k -= 1\n      right -= 1\n      \n  return res\n\n\n# function3是反例，不能这样做\ndef function3(nums):\n  res = [0 for _ in range(len(nums))]\n  k = left = 0\n  right = len(nums)-1\n  \n  while left <= right:\n    if pow(nums[left],2) > pow(nums[right], 2):\n      res[k] = pow(nums[right],2)\n      k += 1\n      left += 1\n    else:\n      res[k] = pow(nums[left], 2)\n      k += 1\n      right -= 1\n      \n  return res\n  \n\nprint(function1(nums))\nprint(function2(nums))\n\n[4, 9, 25, 49, 64]\n[4, 9, 25, 49, 64]"
  },
  {
    "objectID": "list1.html#最小长度区间209",
    "href": "list1.html#最小长度区间209",
    "title": "1  数组1(list)",
    "section": "1.9 最小长度区间（209）",
    "text": "1.9 最小长度区间（209）\n\n要求，大于等于target\n连续的子集\n最小长度的\n两个while循环，从最小的长度1开始，到全局，依然是暴力解法，但是超时\n滑动窗口（双指针）\n\n要点：一个指针的位置一定是终止位置，起始位置用动态移动的策略\n因为如果是起始位置，那么长度依然是个变量，需要全部长度遍历一遍才能得到解，和暴力解法类似\n所以固定了终止位置，子集内的和从0开始累加，如果大于target，那么结束位置的指针停，起始位置开始向后一个一个推出子集和，一直到小于target\n此时的长度更新最后输出的结果长度\n示意图 \n\n\n# input\nnums = [2,3,1,2,4,3]\nnums2 = [1,4,4]\ntarget = 7\ntarget2 = 4\n\n# output: 2, 1\n\n# 暴力解法\ndef MinSubArrayLen(nums, target):\n  length = 1\n  while length <= len(nums):\n    for i in range(len(nums)-length+1):\n      if sum(nums[i:i+length]) >= target:\n        return length\n    length += 1\n  return 0\n\n\n\ndef MinSubArrayLen2(nums, target):\n  # 创建一个指针指向子数组的结束位置\n  sums = 0 # 表示子数组内的集合\n  result = len(nums)\n  start = 0  # 指针1\n  for end in range(len(nums)):  # 指针2\n    sums += nums[end]  # 先让sums不断扩张\n    while (sums >= target):  # 直到sums比target大\n      length = end - start + 1   # 计算此时的数组长度\n      result = min(result, length)   # 为什么是不断找最小值，而不是赋值，因为可能当前length会大于已经更新后的result\n      \n      sums -= nums[start]  # 起始位置的移动，导致和减下去\n      start += 1  # 起始位置的移动导致了sums的递减\n      \n  # 对没有该特征的处理\n  if sums == sum(nums):\n    return 0\n  return result\n      \n\nprint(MinSubArrayLen2(nums, target))\nprint(MinSubArrayLen2(nums2, target2)) \n\n2\n1"
  },
  {
    "objectID": "list1.html#螺旋矩阵59",
    "href": "list1.html#螺旋矩阵59",
    "title": "1  数组1(list)",
    "section": "1.10 螺旋矩阵（59）",
    "text": "1.10 螺旋矩阵（59）\n转一圈时，处理所有的边，遵循左闭右开的原则 – 循环不变量原则\n里面还有坐标的概念，坐标是什么概念\n\n#input\ntarget = 3\n\n# output: [[1,2,3], [8,9,4], [7,6,5]]\n\n\n\ndef SpatialMatrix(target):\n  startx = starty = 0\n  count = 1\n  offset = 1\n  nums = [[0 for _ in range(target)] for _ in range(target)]   # 初始化一个二维的数组用来赋值\n  \n  for i in range(0, target - offset):\n    nums[0][i] = count\n    count += 1\n    starty += 1\n  \n  for j in range(0, target - offset):\n    nums[j][starty] = count\n    count += 1\n  for i in range(target-offset, 0, -1):\n    nums[2][i] = count\n    count += 1\n  for j in range(target - offset, 0, -1):\n    nums[j][0] = count\n    count += 1\n  \n  if target % 2 == 1:\n    nums[1][1] = count\n  return nums\n  \n\nprint(SpatialMatrix(target))\n\n[[1, 2, 3], [8, 9, 4], [7, 6, 5]]"
  }
]