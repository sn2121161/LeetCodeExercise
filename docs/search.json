[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "leetcode_diary",
    "section": "",
    "text": "Self Blog\nThis is a Quarto book to record the mind, methodology, solving code about exercises in LeetCode. put it into Github.\nKeep going, always on the way\n\nprint(\"keep going and always on the way\")\n\nkeep going and always on the way"
  },
  {
    "objectID": "list1.html#两数之和",
    "href": "list1.html#两数之和",
    "title": "1  数组1(list)",
    "section": "1.1 两数之和",
    "text": "1.1 两数之和\n给定一个数组和一个target，找到符合加起来等于target的两个元素\n\n单指针的解法\n\n在这里for循环里是一次，然后in操作又有一次遍历列表的过程，还要确定两者的index不相等，表示不是同一个数\n\n# input\nnums = [2,3,4,5]\ntarget = 8\n\n\ndef TwoSums(list: nums, int: target):\n  for i in range(len(nums)):\n    j = target -nums[i]\n    if j in nums and i != nums.index(j):\n      return [nums[i], j]\n  return -1\n\n\nprint(TwoSums(nums, target))\n\n[3, 5]\n\n\n\n字典的解法\n\n构造一个di，结构是{value1: index1, value2: index2} 用enumerate(nums)的k和v找target - v的值 如果di.get()找到了值则返回 如果找不到，则在字典中加入新的键值对\n\nnums = [2,3,4,5]\ntarget = 6\n\n\ndef TwoSums2(list: nums, int: target):\n  di = {}\n  for k, v in enumerate(nums):\n    if di.get(target - v) is not None:\n      return [target - v, v]\n    di[v] = k\n  return -1\n\n\nprint(TwoSums2(nums, target))\n\n[2, 4]\n\n\n\n双指针的解法 双指针的初始化结构是\n\nleft = 0 right = len(nums)-1 while left right: …. if (condition): return elif (condition): left += 1 else: right -= 1\n\nnums = [2,3,4,5]\ntarget = 5\n\n\ndef TwoSums3(list:nums, int:target):\n  left = 0\n  right = len(nums)-1\n  while left <= right:\n    if nums[left] + nums[right] == target:\n      return [nums[left], nums[right]]\n    elif nums[left] + nums[right] < target:\n      left += 1\n    else:\n      right -= 1\n  return -1\n\n\nprint(TwoSums3(nums, target))\n\n[2, 3]"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n2"
  },
  {
    "objectID": "list1.html#二分查找",
    "href": "list1.html#二分查找",
    "title": "1  数组1(list)",
    "section": "1.2 二分查找",
    "text": "1.2 二分查找\n\n双指针解法\n\n\n\n# input\nnums = [1,3,5,7,9]\ntarget = 9\n\n# output：返回元素所在的index\n\ndef BinarySearch(list: nums, int: target):\n  left = 0\n  right = len(nums) - 1\n  while left <= right:\n    mid = (left+right)//2  # 取整数\n    if target == nums[mid]:\n      return mid\n    elif target > nums[mid]:  # 在右边\n      left += 1\n    else:\n      right -= 1\n  return -1   # 找不到返回-1\n\n\nprint(BinarySearch(nums, target))\n\n4"
  }
]