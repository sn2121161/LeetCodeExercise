offset = 1
nums = [[0 for _ in range(target)] for _ in range(target)]   # 初始化一个二维的数组用来赋值
for i in range(starty, target - offset):
nums[i][starty] = count
count += 1
starty += 1
for j in range(starty, target - offset):
nums[startx][j] = count
count += 1
startx += 1
return nums
print(SpatialMatrix(target))
#input
target = 3
# output: [[1,2,3], [8,9,4], [7,6,5]]
def SpatialMatrix(target):
startx = starty = 0
count = 1
offset = 1
nums = [[0 for _ in range(target)] for _ in range(target)]   # 初始化一个二维的数组用来赋值
for i in range(starty, target - offset):
nums[i][starty] = count
count += 1
return nums
print(SpatialMatrix(target))
#input
target = 3
# output: [[1,2,3], [8,9,4], [7,6,5]]
def SpatialMatrix(target):
startx = starty = 0
count = 1
offset = 1
nums = [[0 for _ in range(target)] for _ in range(target)]   # 初始化一个二维的数组用来赋值
for i in range(starty, target - offset):
nums[starty][i] = count
count += 1
for j in range(startx, target - offset):
nums[j][startx] = count
count += 1
return nums
print(SpatialMatrix(target))
#input
target = 3
# output: [[1,2,3], [8,9,4], [7,6,5]]
def SpatialMatrix(target):
startx = starty = 0
count = 1
offset = 1
nums = [[0 for _ in range(target)] for _ in range(target)]   # 初始化一个二维的数组用来赋值
for i in range(starty, target - offset):
nums[starty][i] = count
count += 1
starty += 1
for j in range(startx, target - offset):
nums[j][starty] = count
count += 1
return nums
print(SpatialMatrix(target))
#input
target = 3
# output: [[1,2,3], [8,9,4], [7,6,5]]
def SpatialMatrix(target):
startx = starty = 0
count = 1
offset = 1
nums = [[0 for _ in range(target)] for _ in range(target)]   # 初始化一个二维的数组用来赋值
for i in range(0, target - offset):
nums[0][i] = count
count += 1
starty += 1
for j in range(0, target - offset):
nums[j][0] = count
count += 1
return nums
print(SpatialMatrix(target))
#input
target = 3
# output: [[1,2,3], [8,9,4], [7,6,5]]
def SpatialMatrix(target):
startx = starty = 0
count = 1
offset = 1
nums = [[0 for _ in range(target)] for _ in range(target)]   # 初始化一个二维的数组用来赋值
for i in range(0, target - offset):
nums[0][i] = count
count += 1
starty += 1
for j in range(0, target - offset):
nums[j][starty] = count
count += 1
return nums
print(SpatialMatrix(target))
#input
target = 3
# output: [[1,2,3], [8,9,4], [7,6,5]]
def SpatialMatrix(target):
startx = starty = 0
count = 1
offset = 1
nums = [[0 for _ in range(target)] for _ in range(target)]   # 初始化一个二维的数组用来赋值
for i in range(0, target - offset):
nums[0][i] = count
count += 1
starty += 1
for j in range(0, target - offset):
nums[j][starty] = count
count += 1
for i in range(target-offset-1, -1, -1):
nums[2][i] = count
count += 1
return nums
print(SpatialMatrix(target))
#input
target = 3
# output: [[1,2,3], [8,9,4], [7,6,5]]
def SpatialMatrix(target):
startx = starty = 0
count = 1
offset = 1
nums = [[0 for _ in range(target)] for _ in range(target)]   # 初始化一个二维的数组用来赋值
for i in range(0, target - offset):
nums[0][i] = count
count += 1
starty += 1
for j in range(0, target - offset):
nums[j][starty] = count
count += 1
for i in range(target-offset, 0, -1):
nums[2][i] = count
count += 1
return nums
print(SpatialMatrix(target))
#input
target = 3
# output: [[1,2,3], [8,9,4], [7,6,5]]
def SpatialMatrix(target):
startx = starty = 0
count = 1
offset = 1
nums = [[0 for _ in range(target)] for _ in range(target)]   # 初始化一个二维的数组用来赋值
for i in range(0, target - offset):
nums[0][i] = count
count += 1
starty += 1
for j in range(0, target - offset):
nums[j][starty] = count
count += 1
for i in range(target-offset, 0, -1):
nums[2][i] = count
count += 1
for j in range(0, target - offset):
nums[j][0] = count
count += 1
return nums
print(SpatialMatrix(target))
#input
target = 3
# output: [[1,2,3], [8,9,4], [7,6,5]]
def SpatialMatrix(target):
startx = starty = 0
count = 1
offset = 1
nums = [[0 for _ in range(target)] for _ in range(target)]   # 初始化一个二维的数组用来赋值
for i in range(0, target - offset):
nums[0][i] = count
count += 1
starty += 1
for j in range(0, target - offset):
nums[j][starty] = count
count += 1
for i in range(target-offset, 0, -1):
nums[2][i] = count
count += 1
for j in range(target - offset, 0, -1):
nums[j][0] = count
count += 1
return nums
print(SpatialMatrix(target))
#input
target = 3
# output: [[1,2,3], [8,9,4], [7,6,5]]
def SpatialMatrix(target):
startx = starty = 0
count = 1
offset = 1
nums = [[0 for _ in range(target)] for _ in range(target)]   # 初始化一个二维的数组用来赋值
for i in range(0, target - offset):
nums[0][i] = count
count += 1
starty += 1
for j in range(0, target - offset):
nums[j][starty] = count
count += 1
for i in range(target-offset, 0, -1):
nums[2][i] = count
count += 1
for j in range(target - offset, 0, -1):
nums[j][0] = count
count += 1
if n % 2 == 1:
nums[1][1] = count
return nums
print(SpatialMatrix(target))
#input
target = 3
# output: [[1,2,3], [8,9,4], [7,6,5]]
def SpatialMatrix(target):
startx = starty = 0
count = 1
offset = 1
nums = [[0 for _ in range(target)] for _ in range(target)]   # 初始化一个二维的数组用来赋值
for i in range(0, target - offset):
nums[0][i] = count
count += 1
starty += 1
for j in range(0, target - offset):
nums[j][starty] = count
count += 1
for i in range(target-offset, 0, -1):
nums[2][i] = count
count += 1
for j in range(target - offset, 0, -1):
nums[j][0] = count
count += 1
if target % 2 == 1:
nums[1][1] = count
return nums
print(SpatialMatrix(target))
# input
nums = [[1,2,3], [4,5,8], [7,12,13]]
nums2 = [[1,4], [0,4]]
# output: [[1,2,3], [4,13]], [[1,4], [5,6], [7,9]]
def CombineSame(nums):
a = 0
while a <= len(nums)-1:
for i in range(len(nums)-1):
if nums[i][-1] >= nums[i+1][0]:
nums[i] = nums[i+1] = [nums[i][0], nums[i+1][-1]]  # 遍历了每个元素
a += 1
# 数组去重，这个复杂度可能很高，
# 因为not in的操作可能需要O(n)时间，但是题目还是解出来了
res = []
for i in range(len(nums)):
if nums[i] not in res:
res.append(nums[i])
return res
# print(CombineSame(nums))
print(CombineSame(nums2))
# input
nums = [[1,2,3], [4,5,8], [7,12,13]]
nums2 = [[1,4], [0,4]]
# output: [[1,2,3], [4,13]], [[1,4], [5,6], [7,9]]
def CombineSame(nums):
a = 0
while a <= len(nums)-1:
for i in range(len(nums)-1):
if nums[i][-1] >= nums[i+1][0]:
nums[i] = nums[i+1] = [min(nums[i][0], nums[i+1][0], max(nums[i+1][-1], num[i][-1]]  # 遍历了每个元素
a += 1
# 数组去重，这个复杂度可能很高，
# 因为not in的操作可能需要O(n)时间，但是题目还是解出来了
res = []
for i in range(len(nums)):
if nums[i] not in res:
res.append(nums[i])
return res
# print(CombineSame(nums))
print(CombineSame(nums2))
# input
nums = [[1,2,3], [4,5,8], [7,12,13]]
nums2 = [[1,4], [0,4]]
# output: [[1,2,3], [4,13]], [[1,4], [5,6], [7,9]]
def CombineSame(nums):
a = 0
while a <= len(nums)-1:
for i in range(len(nums)-1):
if nums[i][-1] >= nums[i+1][0]:
nums[i] = nums[i+1] = [min(nums[i][0], nums[i+1][0], max(nums[i+1][-1], num[i][-1]]  # 遍历了每个元素
a += 1
# 数组去重，这个复杂度可能很高，
# 因为not in的操作可能需要O(n)时间，但是题目还是解出来了
# res = []
# for i in range(len(nums)):
# if nums[i] not in res:
# res.append(nums[i])
return res
# print(CombineSame(nums))
print(CombineSame(nums2))
# input
nums = [[1,2,3], [4,5,8], [7,12,13]]
nums2 = [[1,4], [0,4]]
# output: [[1,2,3], [4,13]], [[1,4], [5,6], [7,9]]
def CombineSame(nums):
a = 0
while a <= len(nums)-1:
for i in range(len(nums)-1):
if nums[i][-1] >= nums[i+1][0]:
nums[i] = nums[i+1] = [min(nums[i][0], nums[i+1][0], max(nums[i+1][-1], num[i][-1]]  # 遍历了每个元素
a += 1
# 数组去重，这个复杂度可能很高，
# 因为not in的操作可能需要O(n)时间，但是题目还是解出来了
# res = []
# for i in range(len(nums)):
# if nums[i] not in res:
# res.append(nums[i])
return nums
# print(CombineSame(nums))
print(CombineSame(nums2))
# input
nums = [[1,2,3], [4,5,8], [7,12,13]]
nums2 = [[1,4], [0,4]]
# output: [[1,2,3], [4,13]], [[1,4], [5,6], [7,9]]
def CombineSame(nums):
a = 0
while a <= len(nums)-1:
for i in range(len(nums)-1):
if nums[i][-1] >= nums[i+1][0]:
nums[i] = nums[i+1] = [min(nums[i][0], nums[i+1][0]), max(nums[i+1][-1], num[i][-1])]  # 遍历了每个元素
a += 1
# 数组去重，这个复杂度可能很高，
# 因为not in的操作可能需要O(n)时间，但是题目还是解出来了
# res = []
# for i in range(len(nums)):
# if nums[i] not in res:
# res.append(nums[i])
return nums
# print(CombineSame(nums))
print(CombineSame(nums2))
# input
nums = [[1,2,3], [4,5,8], [7,12,13]]
nums2 = [[1,4], [0,4]]
# output: [[1,2,3], [4,13]], [[1,4], [5,6], [7,9]]
def CombineSame(nums):
a = 0
while a <= len(nums)-1:
for i in range(len(nums)-1):
if nums[i][-1] >= nums[i+1][0]:
nums[i] = nums[i+1] = [min(nums[i][0], nums[i+1][0]), max(nums[i+1][-1], nums[i][-1])]  # 遍历了每个元素
a += 1
# 数组去重，这个复杂度可能很高，
# 因为not in的操作可能需要O(n)时间，但是题目还是解出来了
# res = []
# for i in range(len(nums)):
# if nums[i] not in res:
# res.append(nums[i])
return nums
# print(CombineSame(nums))
print(CombineSame(nums2))
# input
nums = [[1,2,3], [4,5,8], [7,12,13]]
nums2 = [[1,4], [0,4]]
# output: [[1,2,3], [4,13]], [[1,4], [5,6], [7,9]]
def CombineSame(nums):
a = 0
while a <= len(nums)-1:
for i in range(len(nums)-1):
if nums[i][-1] >= nums[i+1][0]:
nums[i] = nums[i+1] = [min(nums[i][0], nums[i+1][0]), max(nums[i+1][-1], nums[i][-1])]  # 遍历了每个元素
a += 1
# 数组去重，这个复杂度可能很高，
# 因为not in的操作可能需要O(n)时间，但是题目还是解出来了
res = []
for i in range(len(nums)):
if nums[i] not in res:
res.append(nums[i])
return nums
# print(CombineSame(nums))
print(CombineSame(nums2))
# input
nums = [[1,2,3], [4,5,8], [7,12,13]]
nums2 = [[1,4], [0,4]]
# output: [[1,2,3], [4,13]], [[1,4], [5,6], [7,9]]
def CombineSame(nums):
a = 0
while a <= len(nums)-1:
for i in range(len(nums)-1):
if nums[i][-1] >= nums[i+1][0]:
nums[i] = nums[i+1] = [min(nums[i][0], nums[i+1][0]), max(nums[i+1][-1], nums[i][-1])]  # 遍历了每个元素
a += 1
# 数组去重，这个复杂度可能很高，
# 因为not in的操作可能需要O(n)时间，但是题目还是解出来了
res = []
for i in range(len(nums)):
if nums[i] not in res:
res.append(nums[i])
return res
# print(CombineSame(nums))
print(CombineSame(nums2))
# input
nums = [[1,2,3], [4,5,8], [7,12,13]]
nums2 = [[1,4], [0,0]]
# output: [[1,2,3], [4,13]], [[1,4], [5,6], [7,9]]
def CombineSame(nums):
a = 0
while a <= len(nums)-1:
for i in range(len(nums)-1):
if nums[i][-1] >= nums[i+1][0]:
nums[i] = nums[i+1] = [min(nums[i][0], nums[i+1][0]), max(nums[i+1][-1], nums[i][-1])]  # 遍历了每个元素
a += 1
# 数组去重，这个复杂度可能很高，
# 因为not in的操作可能需要O(n)时间，但是题目还是解出来了
res = []
for i in range(len(nums)):
if nums[i] not in res:
res.append(nums[i])
return res
# print(CombineSame(nums))
print(CombineSame(nums2))
# input
nums = [[1,2,3], [4,5,8], [7,12,13]]
nums2 = [[0,0], [1,4]]
# output: [[1,2,3], [4,13]], [[1,4], [5,6], [7,9]]
def CombineSame(nums):
a = 0
while a <= len(nums)-1:
for i in range(len(nums)-1):
if nums[i][-1] >= nums[i+1][0]:
nums[i] = nums[i+1] = [min(nums[i][0], nums[i+1][0]), max(nums[i+1][-1], nums[i][-1])]  # 遍历了每个元素
a += 1
# 数组去重，这个复杂度可能很高，
# 因为not in的操作可能需要O(n)时间，但是题目还是解出来了
res = []
for i in range(len(nums)):
if nums[i] not in res:
res.append(nums[i])
return res
# print(CombineSame(nums))
print(CombineSame(nums2))
# input
nums = [[1,2,3], [4,5,8], [7,12,13]]
nums2 = [[1,4],[0,0]]
# output: [[1,2,3], [4,13]], [[1,4], [5,6], [7,9]]
def CombineSame(nums):
nums.sort()
a = 0
while a <= len(nums)-1:
for i in range(len(nums)-1):
if nums[i][-1] >= nums[i+1][0]:
nums[i] = nums[i+1] = [min(nums[i][0], nums[i+1][0]), max(nums[i+1][-1], nums[i][-1])]  # 遍历了每个元素
a += 1
# 数组去重，这个复杂度可能很高，
# 因为not in的操作可能需要O(n)时间，但是题目还是解出来了
res = []
for i in range(len(nums)):
if nums[i] not in res:
res.append(nums[i])
return res
# print(CombineSame(nums))
print(CombineSame(nums2))
# input
nums = [[1,2,3], [4,5,8], [7,12,13]]
nums2 = [[1,4],[0,4]]
# output: [[1,2,3], [4,13]], [[1,4], [5,6], [7,9]]
def CombineSame(nums):
nums.sort()
a = 0
while a <= len(nums)-1:
for i in range(len(nums)-1):
if nums[i][-1] >= nums[i+1][0]:
nums[i] = nums[i+1] = [min(nums[i][0], nums[i+1][0]), max(nums[i+1][-1], nums[i][-1])]  # 遍历了每个元素
a += 1
# 数组去重，这个复杂度可能很高，
# 因为not in的操作可能需要O(n)时间，但是题目还是解出来了
res = []
for i in range(len(nums)):
if nums[i] not in res:
res.append(nums[i])
return res
# print(CombineSame(nums))
print(CombineSame(nums2))
# input
nums = [[1,2,3], [4,5,8], [7,12,13]]
nums2 = [[1,4],[0,4]]
# output: [[1,2,3], [4,13]], [[1,4], [5,6], [7,9]]
def CombineSame(nums):
nums.sort()
a = 0
while a <= len(nums)-1:
for i in range(len(nums)-1):
if nums[i][-1] >= nums[i+1][0]:
nums[i] = nums[i+1] = [nums[i][0], nums[i+1][-1]]  # 遍历了每个元素
a += 1
# 数组去重，这个复杂度可能很高，
# 因为not in的操作可能需要O(n)时间，但是题目还是解出来了
res = []
for i in range(len(nums)):
if nums[i] not in res:
res.append(nums[i])
return res
# print(CombineSame(nums))
print(CombineSame(nums2))
# input
nums = [[1,2,3], [4,5,8], [7,12,13]]
nums2 = [[1,4],[0,0]]
# output: [[1,2,3], [4,13]], [[1,4], [5,6], [7,9]]
def CombineSame(nums):
nums.sort()
a = 0
while a <= len(nums)-1:
for i in range(len(nums)-1):
if nums[i][-1] >= nums[i+1][0]:
nums[i] = nums[i+1] = [nums[i][0], nums[i+1][-1]]  # 遍历了每个元素
a += 1
# 数组去重，这个复杂度可能很高，
# 因为not in的操作可能需要O(n)时间，但是题目还是解出来了
res = []
for i in range(len(nums)):
if nums[i] not in res:
res.append(nums[i])
return res
# print(CombineSame(nums))
print(CombineSame(nums2))
