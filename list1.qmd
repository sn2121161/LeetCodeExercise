---
jupyter: python3
---

# 数组1(list)

## 两数之和

1.  单指针的解法

在这里for循环里是一次，然后in操作又有一次遍历列表的过程，还要确定两者的index不相等，表示不是同一个数

```{python}
# input
nums = [2,3,4,5]
target = 8

# output: [3, 5]

def TwoSums(list: nums, int: target):
  for i in range(len(nums)):
    j = target -nums[i]
    if j in nums and i != nums.index(j):
      return [nums[i], j]
  return -1


print(TwoSums(nums, target))
```

2.  字典的解法

-   构造一个di，结构是{value1: index1, value2: index2}

-   用enumerate(nums)的k和v找target - v的值

-   如果di.get()找到了值则返回

-   如果找不到，则在字典中加入新的键值对

```{python}
nums = [2,3,4,5]
target = 6


def TwoSums2(list: nums, int: target):
  di = {}
  for k, v in enumerate(nums):
    if di.get(target - v) is not None:
      return [target - v, v]
    di[v] = k
  return -1


print(TwoSums2(nums, target))
```

3.  双指针的解法 双指针的初始化结构是

```{=html}
<!-- -->
```
    # 伪代码
    left = 0 
    right = len(nums)-1 
    while left right: 
      .... 
      if (condition):
        return
      elif (condition):
        left += 1 
      else:
        right -= 1

```{python}
nums = [2,3,4,5]
target = 5


def TwoSums3(list:nums, int:target):
  # 那么先要给数组排序
  nums.sort()
  left = 0
  right = len(nums)-1
  while left <= right:
    if nums[left] + nums[right] == target:
      return [nums[left], nums[right]]
    elif nums[left] + nums[right] < target:
      left += 1
    else:
      right -= 1
  return -1


print(TwoSums3(nums, target))

```

## 二分查找

1.  双指针

![指针示意图](docs/docs/binary.png)

```{python}
# input
nums = [1,3,5,7,9]
target = 9

# output：返回元素所在的index

def BinarySearch(list: nums, int: target):
  left = 0
  right = len(nums) - 1
  while left <= right:
    mid = (left+right)//2  # 取整数
    if target == nums[mid]:
      return mid
    elif target > nums[mid]:  # 在右边
      left += 1
    else:
      right -= 1
  return -1   # 找不到返回-1


print(BinarySearch(nums, target))
```

## 找列表中最小的正整数

1.  创建新列表记录所有的正整数

空间复杂度高

2.  排序，数出负数和0出现到第几个index 排序以后记录下0出现到了第几个位置，count，然后返回count的那个下标是最小值

```{python}
# input
nums = [2,3,-1,-11,-323,1,5,32]

# output: 1

def MinPositive(list:nums):
  count = 0
  nums.sort()
  for i in range(len(nums)):
    if nums[i] <= 0:
      count += 1
  return nums[count]
  
print(MinPositive(nums))
```

小问题：不排序能实现max和min吗？ 可以

```{python}
# input
nums = [2,3,-1,-11,-323,1,5,32,33]

# output: 32


def Max(list:nums):
  temp = 0
  for i in range(1, len(nums)):
    if nums[i] >= nums[temp]:
      temp = i
  return nums[temp]

print(Max(nums))
```

## 三数之和

1.  双指针

* 要求就是搞一个列表容纳所有的解

* 你需要一个遍历去让每个元素，这个元素是第一个指针

* 然后设置left和right的开始，left从第i+1个开始，right从最右边的开始

* 判断相等和大于小于的时候指针怎么走

* 怎么消除重复的影响（因为有些值是重复的）
--需要对每个指针各自前后的值进行比较
--指针a的判断，nums[a] == nums[a-1]: 跳过
--指针b的判断，nums[left-1] == nums[left]: left += 1，否则还是继续考虑当前位置
--指针c的判断，nums[right+1] == nums[right]: right -= 1

![图1](docs/docs/2.png)


![图2](docs/docs/3.png)

```{python}
# input
nums = [-1,0,1,2,-1,-4]
target = 0

# output

def ThreeSums(list: nums, int: target):
  res = []  # 解的容器
  nums.sort()  # 先对数组进行排序
  
  for i in range(len(nums)-1):   # 指针a
    left = i+1  # 指针b
    right = len(nums)-1  # 指针c
    if nums[i] == nums[i-1]:  #这是指针a自己的判断，判断前一个后一个是否相等
      continue  # 跳过相同值得指针得计算
    while left < right:
      sums = nums[i] + nums[left] + nums[right]
      if sums == target and nums[right] != nums[left]:
        res.append( [nums[i], nums[left], nums[right]] )  # 符合的加入解集
        left += 1 # 接着往后计算
        # 其实去掉也行嘛
        
        # if nums[left] == nums[left - 1]: # 指针b得前后值相同
          # left += 1
        # right -= 1  # else
        # if nums[right] == nums[right + 1]:
          # right -= 1
      elif sums < target:
        left += 1
      else:
        right -= 1
        
  return res
  
print(ThreeSums(nums, target))
```

### 解析：假如本例中的5,5,10
pointer a = 5
pointer b = 5
pointer c = 10
他符合等于target的条件，加入res
left += 1
pointer a = 5
pointer b = 6
pointer c = 9 (left != left-1，所以走right-=1的路，再判断此时的right+1和当前right是否相等，发现不等，则无需再让right-=1)
判断5,6,9依然符合条件
left += 1， left=9，right <9,循环结束



### 另外一个问题：消除二维数组的重复问题

```{python}

# input
nums = [[1,2,3], [4,5,6], [4,5,6], [1,2,3]]

# output: [[1,2,3], [4,5,6]]

def eliminate(list: nums) -> list:
  di = {}
  for i, v in enumerate(nums):
    di[str(v)] = i
  return di.keys()

def eliminate2(list: nums) -> list:
  res = []
  for i in range(len(nums)):
    if nums[i] not in res:
      res.append(nums[i])
  return res
  
print(eliminate2(nums))
```

## 数组实现哈希表

一个哈希表的功能有：

key: value是哈希表的基本单位
* 增加元素
* 删除元素
* 查找元素，找不到返回-1

本题巧妙处就是构造了一个全是-1的数组，注意长度不要溢出即可

```{python}

class Hashmap():
  def __init__(self):
    self.hashmap = [-1 for _ in range(10**3)]  # 构造一个全是-1的元素表
  
  def add(self, key, value):
    self.hashmap[key] = value
  
  def get(self, key):
    return self.hashmap[key]
    
  def remove(self, key):
    self.hashmap[key] = -1

h = Hashmap()
h.add(1, 2)
h.add(10, 4)
print(h.get(10))
print(h.get(1))
print(h.get(5))
h.remove(1)
print(h.get(1))
    
```



## 数组的合并


```{python}
# input 
nums = [[1,2,3], [4,5,8], [7,12,13]]
nums2 = [[1,4],[0,0]]

# output: [[1,2,3], [4,13]], [[1,4], [5,6], [7,9]]

def CombineSame(nums):
  nums.sort()
  a = 0
  while a <= len(nums)-1:
    for i in range(len(nums)-1):
      if nums[i][-1] >= nums[i+1][0]:
        nums[i] = nums[i+1] = [nums[i][0], nums[i+1][-1]]  # 遍历了每个元素
        
      a += 1
      
  # 数组去重，这个复杂度可能很高，
  # 因为not in的操作可能需要O(n)时间，但是题目还是解出来了
  res = []
  
  for i in range(len(nums)):
    if nums[i] not in res:
      res.append(nums[i])
  
  return res


# print(CombineSame(nums))
print(CombineSame(nums2))
```

## 删除数组的元素（27）

1. 两层for循环

删除元素的操作时间复杂度是O(n)，因为删去了一个元素，还要让其他的元素进行补位，只是在计数器层面上他的长度减少了1，在物理空间储存上任然是原长度

2. 双指针

* 定义一个慢指针和一个快指针
* 快指针负责寻找哪些元素是要的，当前案例3是不要的，然后再赋值给慢指针，所以慢指针是被赋值的元素
* 慢指针也需要往后加一

示意图
![](docs/docs/4.png)

```{python}

# input
nums = [1,2,3,4,5]
target = 3

# output [1,2,4,5,5]

# 两层for循环
def delete0(nums, target):
  for i in range(len(nums)):
    if nums[i] == target:
      for j in range(0, i):
        nums[i+j] = nums[j+i+1]
  return nums, len(nums)

# 双指针
def delete1(nums, target):
  slow = 0  # 慢指针
  for i in range(len(nums)):  # 快指针
    if nums[i] != target:
      nums[slow] = nums[i]  # 对非目标元素进行一一赋值
      slow += 1   # 慢指针也需要移动
  return slow
print(delete0(nums, target))
print(delete1(nums, target))
```


## 有序数组的平方（977）

1. O(nlogn):负数的平方需要排个序

2. 双指针 O(n)：

首先，一个可以使用的思路：先构造一个有初始值的列表，然后从左往右或者从右往左进行赋值

为什么function3是不对的：

因为左边和右边代表着两个之间必有一个是全局最大，
最大的在新数组中放在最优的位置，
而你通过两侧的指针不能确定全局最小在哪里，要从中心往外延申
append也不对，因为append是从最小的开始往数组里加


```{python}

# input
nums = [-8, 2, 3, 5, 7]

# output [1,4,9,25,49]

def function1(nums):
  a = list(map(lambda x:x**2, nums))
  a.sort()
  return a


def function2(nums):
  res = [0 for _ in range(len(nums))]   # 生成一个有值的数组，然后从数组的最右侧开始像最左侧赋值

  left = 0
  right = k = len(nums)-1
  while left <= right:
    if pow(nums[left], 2) > pow(nums[right], 2):
      res[k] = pow(nums[left], 2)
      k -= 1
      left += 1
      
    else:
      res[k] = pow(nums[right], 2)
      k -= 1
      right -= 1
      
  return res


# function3是反例，不能这样做
def function3(nums):
  res = [0 for _ in range(len(nums))]
  k = left = 0
  right = len(nums)-1
  
  while left <= right:
    if pow(nums[left],2) > pow(nums[right], 2):
      res[k] = pow(nums[right],2)
      k += 1
      left += 1
    else:
      res[k] = pow(nums[left], 2)
      k += 1
      right -= 1
      
  return res
  

print(function1(nums))
print(function2(nums))

```


## 最小长度区间（209）

1. 要求，大于等于target
2. 连续的子集
3. 最小长度的

1. 两个while循环，从最小的长度1开始，到全局，依然是暴力解法，但是超时

2. 滑动窗口（双指针）

要点：一个指针的位置一定是终止位置，起始位置用动态移动的策略

因为如果是起始位置，那么长度依然是个变量，需要全部长度遍历一遍才能得到解，和暴力解法类似

所以固定了终止位置，子集内的和从0开始累加，如果大于target，那么结束位置的指针停，起始位置开始向后一个一个推出子集和，一直到小于target

此时的长度更新最后输出的结果长度

示意图
![](docs/docs/5.png)

![](docs/docs/6.png)

```{python}
# input
nums = [2,3,1,2,4,3]
nums2 = [1,4,4]
target = 7
target2 = 4

# output: 2, 1

# 暴力解法
def MinSubArrayLen(nums, target):
  length = 1
  while length <= len(nums):
    for i in range(len(nums)-length+1):
      if sum(nums[i:i+length]) >= target:
        return length
    length += 1
  return 0



def MinSubArrayLen2(nums, target):
  # 创建一个指针指向子数组的结束位置
  sums = 0 # 表示子数组内的集合
  result = len(nums)
  start = 0  # 指针1
  for end in range(len(nums)):  # 指针2
    sums += nums[end]  # 先让sums不断扩张
    while (sums >= target):  # 直到sums比target大
      length = end - start + 1   # 计算此时的数组长度
      result = min(result, length)   # 为什么是不断找最小值，而不是赋值，因为可能当前length会大于已经更新后的result
      
      sums -= nums[start]  # 起始位置的移动，导致和减下去
      start += 1  # 起始位置的移动导致了sums的递减
      
  # 对没有该特征的处理
  if sums == sum(nums):
    return 0
  return result
      

print(MinSubArrayLen2(nums, target))
print(MinSubArrayLen2(nums2, target2)) 
```


## 螺旋矩阵（59）

转一圈时，处理所有的边，遵循左闭右开的原则 -- 循环不变量原则

里面还有坐标的概念，坐标是什么概念

```{python}

#input
target = 3

# output: [[1,2,3], [8,9,4], [7,6,5]]



def SpatialMatrix(target):
  startx = starty = 0
  count = 1
  offset = 1
  nums = [[0 for _ in range(target)] for _ in range(target)]   # 初始化一个二维的数组用来赋值
  
  for i in range(0, target - offset):
    nums[0][i] = count
    count += 1
    starty += 1
  
  for j in range(0, target - offset):
    nums[j][starty] = count
    count += 1
  for i in range(target-offset, 0, -1):
    nums[2][i] = count
    count += 1
  for j in range(target - offset, 0, -1):
    nums[j][0] = count
    count += 1
  
  if target % 2 == 1:
    nums[1][1] = count
  return nums
  

print(SpatialMatrix(target))
    

```
































